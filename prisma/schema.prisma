generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:password@localhost:5432/gbdb?schema=public"
}

model TwitchAuthToken {
  type            String @unique
  twitchAuthToken String
}

model ChatGameRoom {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  game      Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    Int           @unique
  messages  GameMessage[]
}

model GameMessage {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  gameRoom   ChatGameRoom @relation(fields: [gameRoomId], references: [id], onDelete: Cascade)
  gameRoomId String
  message    String       @db.VarChar(500)
  sentGameBy User         @relation("sender", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

model ChatPrivateRoom {
  id         String           @id @unique
  createdAt  DateTime         @default(now())
  user1Email String
  user2Email String
  messages   PrivateMessage[]
}

model PrivateMessage {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  privateRoom       ChatPrivateRoom @relation(fields: [chatPrivateRoomId], references: [id], onDelete: Cascade)
  chatPrivateRoomId String
  message           String          @db.VarChar(500)
  sentPrivateBy     User            @relation("sender", fields: [userId], references: [id], onDelete: Cascade)
  userId            String
}

model User {
  id            String           @id
  email         String?          @unique
  userName      String?
  bio           String?
  timezone      String?
  games         Game[]
  followedBy    Follows[]        @relation("followedBy")
  following     Follows[]        @relation("following")
  sentGameBy    GameMessage[]    @relation("sender")
  sentPrivateBy PrivateMessage[] @relation("sender")
}

model Follows {
  followedBy      User   @relation("followedBy", fields: [followedById], references: [id], onDelete: Cascade)
  followedById    String
  followedByUName String
  following       User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId     String
  followingUName  String

  @@id([followingId, followedById])
}

model Game {
  id               Int           @id @unique
  name             String
  summary          String?
  url              String?
  platformIds      Int[]
  modeIds          Int[]
  genreIds         Int[]
  platforms        Platform[]
  modes            Mode[]
  genres           Genre[]
  users            User[]
  firstReleaseDate Int?
  totalRating      Float?
  gameRoom         ChatGameRoom?
}

model Platform {
  id    Int    @id @unique
  name  String
  games Game[]
}

model Mode {
  id    Int    @id @unique
  name  String
  games Game[]
}

model Genre {
  id    Int    @id @unique
  name  String
  games Game[]
}
