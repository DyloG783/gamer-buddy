generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection (NULL in local)
}

model TwitchAuthToken {
  type            String @unique
  twitchAuthToken String
}

model ChatGameRoom {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  gameId    Int           @unique
  game      Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  messages  GameMessage[]
}

model GameMessage {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  gameRoomId String
  message    String       @db.VarChar(500)
  userId     String
  gameRoom   ChatGameRoom @relation(fields: [gameRoomId], references: [id], onDelete: Cascade)
  sentGameBy User         @relation("sender", fields: [userId], references: [id], onDelete: Cascade)
}

model ChatPrivateRoom {
  createdAt  DateTime         @default(now())
  user1Email String
  user2Email String
  id         String           @id @unique
  messages   PrivateMessage[]
}

model PrivateMessage {
  createdAt         DateTime        @default(now())
  message           String          @db.VarChar(500)
  id                String          @id @default(cuid())
  userId            String
  chatPrivateRoomId String
  privateRoom       ChatPrivateRoom @relation(fields: [chatPrivateRoomId], references: [id], onDelete: Cascade)
  sentPrivateBy     User            @relation("sender", fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id
  userName      String?
  email         String           @unique
  bio           String?
  timezone      String?
  followedBy    Follows[]        @relation("followedBy")
  following     Follows[]        @relation("following")
  sentGameBy    GameMessage[]    @relation("sender")
  sentPrivateBy PrivateMessage[] @relation("sender")
  games         Game[]           @relation("GameToUser")
}

model Follows {
  followedByEmail String
  followingEmail  String
  followedById    String
  followingId     String
  followedByUName String
  followingUName  String
  followedBy      User   @relation("followedBy", fields: [followedByEmail], references: [email], onDelete: Cascade)
  following       User   @relation("following", fields: [followingEmail], references: [email], onDelete: Cascade)

  @@id([followingEmail, followedByEmail])
}

model Game {
  id               Int           @id @unique
  name             String
  summary          String?
  url              String?
  firstReleaseDate Int?
  genres           String[]
  modes            String[]
  platforms        String[]
  gameRoom         ChatGameRoom?
  users            User[]        @relation("GameToUser")
}

model Platform {
  id   Int    @id @unique
  name String
}

model Mode {
  id   Int    @id @unique
  name String
}

model Genre {
  id   Int    @id @unique
  name String
}
